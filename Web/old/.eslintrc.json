{
    "root": true,
    "env": {
        "browser": true,
        "es6": true,
        "node": true
    },
    "extends": "eslint:recommended",
    "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module",
        "ecmaFeatures": {
            "impliedStrict": true
        }
    },
    "rules": {
        /* Possible Errors */
        "for-direction": "error", // enforce “for” loop update clause moving the counter in the right direction.
        "getter-return": "error", // enforce return statements in getters
        "no-await-in-loop": "warn", // disallow await inside of loops
        // "no-compare-neg-zero": "", // disallow comparing against -0
        // "no-cond-assign": "", // disallow assignment operators in conditional expressions
        // "no-console": "", // disallow the use of console
        // "no-constant-condition": "", // disallow constant expressions in conditions
        // "no-control-regex": "", // disallow control characters in regular expressions
        // "no-debugger": "", // disallow the use of debugger
        // "no-dupe-args": "", // disallow duplicate arguments in function definitions
        // "no-dupe-keys": "", // disallow duplicate keys in object literals
        // "no-duplicate-case": "", // disallow duplicate case labels
        // "no-empty": "", // disallow empty block statements
        // "no-empty-character-class": "", // disallow empty character classes in regular expressions
        // "no-ex-assign": "", // disallow reassigning exceptions in catch clauses
        // "no-extra-boolean-cast": "", // disallow unnecessary boolean casts
        "no-extra-parens": "off", // disallow unnecessary parentheses
        // "no-extra-semi": "", // disallow unnecessary semicolons
        // "no-func-assign": "", // disallow reassigning function declarations
        // "no-inner-declarations": "", // disallow variable or function declarations in nested blocks
        // "no-invalid-regexp": "", // disallow invalid regular expression strings in RegExp constructors
        // "no-irregular-whitespace": "", // disallow irregular whitespace outside of strings and comments
        // "no-obj-calls": "", // disallow calling global object properties as functions
        "no-prototype-builtins": "warn", // disallow calling some Object.prototype methods directly on objects
        // "no-regex-spaces": "", // disallow multiple spaces in regular expressions
        // "no-sparse-arrays": "", // disallow sparse arrays
        "no-template-curly-in-string": "warn", // disallow template literal placeholder syntax in regular strings
        // "no-unexpected-multiline": "", // disallow confusing multiline expressions
        // "no-unreachable": "", // disallow unreachable code after return, throw, continue, and break statements
        // "no-unsafe-finally": "", // disallow control flow statements in finally blocks
        // "no-unsafe-negation": "", // disallow negating the left operand of relational operators
        // "use-isnan": "", // require calls to isNaN() when checking for NaN
        "valid-jsdoc": "error", // enforce valid JSDoc comments
        // "valid-typeof": "", // enforce comparing typeof expressions against valid strings

        /* Best Practices */
        "accessor-pairs": "off", // enforce getter and setter pairs in objects
        "array-callback-return": "error", // enforce return statements in callbacks of array methods
        "block-scoped-var": "warn", // enforce the use of variables within the scope they are defined
        "class-methods-use-this": "warn", // enforce that class methods utilize this
        "complexity": "off", // enforce a maximum cyclomatic complexity allowed in a program
        "consistent-return": "error", // require return statements to either always or never specify values
        "curly": ["error", "multi-or-nest"], // enforce consistent brace style for all control statements
        "default-case": "error", // require default cases in switch statements
        "dot-location": ["error", "property"], // enforce consistent newlines before and after dots
        "dot-notation": "off", // enforce dot notation whenever possible
        "eqeqeq": "error", // require the use of === and !==
        "guard-for-in": "error", // require for-in loops to include an if statement
        "no-alert": "warn", // disallow the use of alert, confirm, and prompt
        "no-caller": "warn", // disallow the use of arguments.caller or arguments.callee
        // "no-case-declarations": "", // disallow lexical declarations in case clauses
        "no-div-regex": "off", // disallow division operators explicitly at the beginning of regular expressions
        "no-else-return": "off", // disallow else blocks after return statements in if statements
        "no-empty-function": "error", // disallow empty functions
        // "no-empty-pattern": "", // disallow empty destructuring patterns
        "no-eq-null": "off", // disallow null comparisons without type-checking operators
        "no-eval": "error", // disallow the use of eval()
        "no-extend-native": "error", // disallow extending native types
        "no-extra-bind": "off", // disallow unnecessary calls to .bind()
        "no-extra-label": "warn", // disallow unnecessary labels
        // "no-fallthrough": "", // disallow fallthrough of case statements
        "no-floating-decimal": "error", // disallow leading or trailing decimal points in numeric literals
        // "no-global-assign": "", // disallow assignments to native objects or read-only global variables
        "no-implicit-coercion": "off", // disallow shorthand type conversions
        "no-implicit-globals": "off", // disallow variable and function declarations in the global scope
        "no-implied-eval": "error", // disallow the use of eval()-like methods
        "no-invalid-this": "warn", // disallow this keywords outside of classes or class-like objects
        "no-iterator": "error", // disallow the use of the __iterator__ property
        "no-labels": "off", // disallow labeled statements
        "no-lone-blocks": "warn", // disallow unnecessary nested blocks
        "no-loop-func": "warn", // disallow function declarations and expressions inside loop statements
        "no-magic-numbers": "warn", // disallow magic numbers
        "no-multi-spaces": "error", // disallow multiple spaces
        "no-multi-str": "error", // disallow multiline strings
        "no-new": "error", // disallow new operators outside of assignments or comparisons
        "no-new-func": "warn", // disallow new operators with the Function object
        "no-new-wrappers": "error", // disallow new operators with the String, Number, and Boolean objects
        // "no-octal": "", // disallow octal literals
        "no-octal-escape": "error", // disallow octal escape sequences in string literals
        "no-param-reassign": "warn", // disallow reassigning function parameters
        "no-proto": "error", // disallow the use of the __proto__ property
        // "no-redeclare": "", // disallow variable redeclaration
        "no-restricted-properties": "off", // disallow certain properties on certain objects
        "no-return-assign": "warn", // disallow assignment operators in return statements
        "no-return-await": "error", // disallow unnecessary return await
        "no-script-url": "error", // disallow javascript: urls
        // "no-self-assign": "", // disallow assignments where both sides are exactly the same
        "no-self-compare": "error", // disallow comparisons where both sides are exactly the same
        "no-sequences": "error", // disallow comma operators
        "no-throw-literal": "error", // disallow throwing literals as exceptions
        "no-unmodified-loop-condition": "error", // disallow unmodified loop conditions
        "no-unused-expressions": "warn", // disallow unused expressions
        // "no-unused-labels": "", // disallow unused labels
        "no-useless-call": "warn", // disallow unnecessary calls to .call() and .apply()
        "no-useless-concat": "error", // disallow unnecessary concatenation of literals or template literals
        // "no-useless-escape": "", // disallow unnecessary escape characters
        "no-useless-return": "error", // disallow redundant return statements
        "no-void": "off", // disallow void operators
        "no-warning-comments": "off", // disallow specified warning terms in comments
        "no-with": "error", // disallow with statements
        "prefer-promise-reject-errors": "error", // require using Error objects as Promise rejection reasons
        "radix": "error", // enforce the consistent use of the radix argument when using parseInt()
        "require-await": "error", // disallow async functions which have no await expression
        "vars-on-top": "off", // require var declarations be placed at the top of their containing scope
        "wrap-iife": "error", // require parentheses around immediate function invocations
        "yoda": ["error", "never", { "exceptRange": true }], // require or disallow “Yoda” conditions

        /* Strict Mode */
        "strict": "error", // require or disallow strict mode directives

        /* Variables */
        "init-declarations": "off", // require or disallow initialization in variable declarations
        "no-catch-shadow": "error", // disallow catch clause parameters from shadowing variables in the outer scope
        // "no-delete-var": "", // disallow deleting variables
        "no-label-var": "error", // disallow labels that share a name with a variable
        "no-restricted-globals": "off", // disallow specified global variables
        "no-shadow": "error", // disallow variable declarations from shadowing variables declared in the outer scope
        "no-shadow-restricted-names": "error", // disallow identifiers from shadowing restricted names
        // "no-undef": "", // disallow the use of undeclared variables unless mentioned in /*global */ comments
        "no-undef-init": "error", // disallow initializing variables to undefined
        "no-undefined": "error", // disallow the use of undefined as an identifier
        // "no-unused-vars": "", // disallow unused variables
        "no-use-before-define": "error", // disallow the use of variables before they are defined

        /* Node.js and CommonJS */
        "callback-return": "error", // require return statements after callbacks
        "global-require": "off", // require require() calls to be placed at top-level module scope
        "handle-callback-err": "error", // require error handling in callbacks
        "no-buffer-constructor": "error", // disallow use of the Buffer() constructor
        "no-mixed-requires": "error", // disallow require calls to be mixed with regular variable declarations
        "no-new-require": "error", // disallow new operators with calls to require
        "no-path-concat": "error", // disallow string concatenation with __dirname and __filename
        "no-process-env": "off", // disallow the use of process.env
        "no-process-exit": "off", // disallow the use of process.exit()
        "no-restricted-modules": "off", // disallow specified modules when loaded by require
        "no-sync": "warn", // disallow synchronous methods

        /* Stylistic Issues */
        "array-bracket-newline": ["error", { "multiline": true }], // enforce linebreaks after opening and before closing array brackets
        "array-bracket-spacing": "off", // enforce consistent spacing inside array brackets
        "array-element-newline": ["error", { "multiline": true }], // enforce line breaks after each array element
        "block-spacing": "error", // disallow or enforce spaces inside of blocks after opening block and before closing block
        "brace-style": ["error", "stroustrup", { "allowSingleLine": true }], // enforce consistent brace style for blocks
        "camelcase": "warn", // enforce camelcase naming convention
        "capitalized-comments": "off", // enforce or disallow capitalization of the first letter of a comment
        "comma-dangle": "off", // require or disallow trailing commas
        "comma-spacing": "error", // enforce consistent spacing before and after commas
        "comma-style": "error", // enforce consistent comma style
        "computed-property-spacing": "error", // enforce consistent spacing inside computed property brackets
        "consistent-this": ["error", "that", "self", "_this"], // enforce consistent naming when capturing the current execution context
        "eol-last": "error", // require or disallow newline at the end of files
        "func-call-spacing": "error", // require or disallow spacing between function identifiers and their invocations
        "func-name-matching": "error", // require function names to match the name of the variable or property to which they are assigned
        "func-names": ["error", "as-needed"], // require or disallow named function expressions
        "func-style": "off", // enforce the consistent use of either function declarations or expressions
        "function-paren-newline": ["error", "consistent"], // enforce consistent line breaks inside function parentheses
        "id-blacklist": "off", // disallow specified identifiers
        "id-length": "off", // enforce minimum and maximum identifier lengths
        "id-match": "off", // require identifiers to match a specified regular expression
        "implicit-arrow-linebreak": "error", // enforce the location of arrow function bodies
        "indent": ["error", 4], // enforce consistent indentation
        "jsx-quotes": "off", // enforce the consistent use of either double or single quotes in JSX attributes
        "key-spacing": ["error", { "mode": "minimum" }], // enforce consistent spacing between keys and values in object literal properties
        "keyword-spacing": "error", // enforce consistent spacing before and after keywords
        "line-comment-position": "off", // enforce position of line comments
        "linebreak-style": ["error", "unix"], // enforce consistent linebreak style
        "lines-around-comment": "error", // require empty lines around comments
        "lines-between-class-members": "off", // require or disallow an empty line between class members
        "max-depth": "off", // enforce a maximum depth that blocks can be nested
        "max-len": "off", // enforce a maximum line length
        "max-lines": "off", // enforce a maximum number of lines per file
        "max-nested-callbacks": "off", // enforce a maximum depth that callbacks can be nested
        "max-params": "off", // enforce a maximum number of parameters in function definitions
        "max-statements": "off", // enforce a maximum number of statements allowed in function blocks
        "max-statements-per-line": "off", // enforce a maximum number of statements allowed per line
        "multiline-comment-style": ["warn", "starred-block"], // enforce a particular style for multiline comments
        "multiline-ternary": ["error", "always-multiline"], // enforce newlines between operands of ternary expressions
        "new-cap": "error", // require constructor names to begin with a capital letter
        "new-parens": "error", // require parentheses when invoking a constructor with no arguments
        "newline-per-chained-call": "error", // require a newline after each call in a method chain
        "no-array-constructor": "error", // disallow Array constructors
        "no-bitwise": "off", // disallow bitwise operators
        "no-continue": "off", // disallow continue statements
        "no-inline-comments": "off", // disallow inline comments after code
        "no-lonely-if": "error", // disallow if statements as the only statement in else blocks
        "no-mixed-operators": "error", // disallow mixed binary operators
        // "no-mixed-spaces-and-tabs": "", // disallow mixed spaces and tabs for indentation
        "no-multi-assign": "off", // disallow use of chained assignment expressions
        "no-multiple-empty-lines": "off", // disallow multiple empty lines
        "no-negated-condition": "off", // disallow negated conditions
        "no-nested-ternary": "off", // disallow nested ternary expressions
        "no-new-object": "error", // disallow Object constructors
        "no-plusplus": "off", // disallow the unary operators ++ and --
        "no-restricted-syntax": "off", // disallow specified syntax
        "no-tabs": "error", // disallow all tabs
        "no-ternary": "off", // disallow ternary operators
        "no-trailing-spaces": "error", // disallow trailing whitespace at the end of lines
        "no-underscore-dangle": "off", // disallow dangling underscores in identifiers
        "no-unneeded-ternary": "error", // disallow ternary operators when simpler alternatives exist
        "no-whitespace-before-property": "error", // disallow whitespace before properties
        "nonblock-statement-body-position": "off", // enforce the location of single-line statements
        "object-curly-newline": ["error", { "consistent": true }], // enforce consistent line breaks inside braces
        "object-curly-spacing": ["error", "always"], // enforce consistent spacing inside braces
        "object-property-newline": "off", // enforce placing object properties on separate lines
        "one-var": "off", // enforce variables to be declared either together or separately in functions
        "one-var-declaration-per-line": "off", // require or disallow newlines around variable declarations
        "operator-assignment": "off", // require or disallow assignment operator shorthand where possible
        "operator-linebreak": "off", // enforce consistent linebreak style for operators
        "padded-blocks": "off", // require or disallow padding within blocks
        "padding-line-between-statements": "off", // require or disallow padding lines between statements
        "quote-props": "off", // require quotes around object literal property names
        "quotes": "off", // enforce the consistent use of either backticks, double, or single quotes
        "require-jsdoc": "off", // require JSDoc comments
        "semi": ["error", "always"], // require or disallow semicolons instead of ASI
        "semi-spacing": "error", // enforce consistent spacing before and after semicolons
        "semi-style": "error", // enforce location of semicolons
        "sort-keys": "off", // require object keys to be sorted
        "sort-vars": "off", // require variables within the same declaration block to be sorted
        "space-before-blocks": "error", // enforce consistent spacing before blocks
        "space-before-function-paren": ["error", "never"], // enforce consistent spacing before function definition opening parenthesis
        "space-in-parens": "error", // enforce consistent spacing inside parentheses
        "space-infix-ops": "error", // require spacing around infix operators
        "space-unary-ops": "error", // enforce consistent spacing before or after unary operators
        "spaced-comment": "error", // enforce consistent spacing after the // or /* in a comment
        "switch-colon-spacing": "error", // enforce spacing around colons of switch statements
        "template-tag-spacing": "error", // require or disallow spacing between template tags and their literals
        "unicode-bom": "error", // require or disallow Unicode byte order mark (BOM)
        "wrap-regex": "off", // require parenthesis around regex literals

        /* ECMAScript 6 */
        "arrow-body-style": "error", // require braces around arrow function bodies
        "arrow-parens": ["error", "as-needed"], // require parentheses around arrow function arguments
        "arrow-spacing": "error", // enforce consistent spacing before and after the arrow in arrow functions
        //"constructor-super": "", // require super() calls in constructors
        "generator-star-spacing": "error", // enforce consistent spacing around * operators in generator functions
        //"no-class-assign": "", // disallow reassigning class members
        "no-confusing-arrow": ["error", {"allowParens": true}], // disallow arrow functions where they could be confused with comparisons
        //"no-const-assign": "", // disallow reassigning const variables
        //"no-dupe-class-members": "", // disallow duplicate class members
        "no-duplicate-imports": "error", // disallow duplicate module imports
        //"no-new-symbol": "", // disallow new operators with the Symbol object
        "no-restricted-imports": "off", // disallow specified modules when loaded by import
        //"no-this-before-super": "", // disallow this/super before calling super() in constructors
        "no-useless-computed-key": "error", // disallow unnecessary computed property keys in object literals
        "no-useless-constructor": "error", // disallow unnecessary constructors
        "no-useless-rename": "error", // disallow renaming import, export, and destructured assignments to the same name
        "no-var": "error", // require let or const instead of var
        "object-shorthand": "off", // require or disallow method and property shorthand syntax for object literals
        "prefer-arrow-callback": "warn", // require using arrow functions for callbacks
        "prefer-const": "error", // require const declarations for variables that are never reassigned after declared
        "prefer-destructuring": "off", // require destructuring from arrays and/or objects
        "prefer-numeric-literals": "off", // disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals
        "prefer-rest-params": "warn", // require rest parameters instead of arguments
        "prefer-spread": "off", // require spread operators instead of .apply()
        "prefer-template": "warn", // require template literals instead of string concatenation
        //"require-yield": "", // require generator functions to contain yield
        "rest-spread-spacing": "error", // enforce spacing between rest and spread operators and their expressions
        "sort-imports": "warn", // enforce sorted import declarations within modules
        "symbol-description": "error", // require symbol descriptions
        "template-curly-spacing": "error", // require or disallow spacing around embedded expressions of template strings
        "yield-star-spacing": "error", // require or disallow spacing around the * in yield* expressions

        // Recommended Overrides
        "no-console": "warn",
        "no-control-regex": "warn"
    }
}
